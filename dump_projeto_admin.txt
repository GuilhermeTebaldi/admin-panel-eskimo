./src/PaymentSettings.jsx:
```jsx
import { useEffect, useMemo, useState } from "react";
import axios from "axios";
import { toast } from "react-toastify";

// Base da API (usa VITE_API_URL, cai pra localhost se não tiver)
const API_URL = import.meta.env.VITE_API_URL ?? "http://localhost:8080/api";

// Cabeçalho com JWT, se existir
const auth = {
  headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
};

// Mapeamento oficial (o site usa estes SLUGS na Loja)
const STORES = [
  { label: "Efapi", slug: "efapi" },
  { label: "Palmital", slug: "palmital" },
  { label: "Passo dos Fortes", slug: "passo" }, // slug "passo" no site
];

// Normaliza string para comparar (sem acento, lower, trim)
const normalize = (s) =>
  (s ?? "")
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .trim();

// Converte qualquer nome livre para um slug conhecido
const toSlug = (s) => {
  const n = normalize(s);
  if (n.includes("efapi")) return "efapi";
  if (n.includes("palmital")) return "palmital";
  // várias formas comuns para "Passo dos Fortes"
  if (["passo", "passo dos fortes", "passo-dos-fortes"].includes(n)) return "passo";
  return n; // fallback (mas no nosso fluxo vamos sempre salvar slug válido)
};

export default function PaymentSettings() {
  const [configs, setConfigs] = useState([]); // lista crua que vem da API
  const [loading, setLoading] = useState(true);

  // Loja selecionada (sempre por slug)
  const [storeSlug, setStoreSlug] = useState(STORES[0].slug);

  // Formulário
  const [cnpj, setCnpj] = useState("");
  const [provider, setProvider] = useState("mercadopago");
  const [isActive, setIsActive] = useState(true);

  // Mercado Pago
  const [mpPublicKey, setMpPublicKey] = useState("");
  const [mpAccessToken, setMpAccessToken] = useState("");

  // PIX Banco (futuro)
  const [pixKey, setPixKey] = useState("");
  const [bankName, setBankName] = useState("");
  const [bankClientId, setBankClientId] = useState("");
  const [bankClientSecret, setBankClientSecret] = useState("");
  const [bankCertPath, setBankCertPath] = useState("");
  const [bankCertPassword, setBankCertPassword] = useState("");

  // Índice das configs por slug (aceita qualquer "store" que já esteja salvo)
  const configsBySlug = useMemo(() => {
    const map = new Map();
    for (const c of configs) {
      const slug = toSlug(c.store);
      if (!map.has(slug)) map.set(slug, c);
    }
    return map;
  }, [configs]);

  // Carrega todas as configs
  const loadAll = async () => {
    try {
      const tryGet = async (withAuth) =>
        axios.get(`${API_URL}/paymentconfigs`, withAuth ? auth : undefined);

      let data;
      try {
        ({ data } = await tryGet(true));
      } catch (e) {
        // se a rota não exigir auth, tenta sem header
        if (e?.response?.status === 401) throw e;
        ({ data } = await tryGet(false));
      }
      setConfigs(Array.isArray(data) ? data : []);
    } catch (e) {
      console.error(e);
      toast.error("Não foi possível carregar as configurações de pagamento.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadAll();
     
  }, []);

  // Preenche o formulário com base no slug selecionado
  const fillFormFromSlug = (slug) => {
    const cfg = configsBySlug.get(slug);
    setCnpj(cfg?.cnpj || "");
    setProvider(cfg?.provider || "mercadopago");
    setIsActive(cfg?.isActive ?? true);
    setMpPublicKey(cfg?.mpPublicKey || "");
    setMpAccessToken(cfg?.mpAccessToken || "");
    setPixKey(cfg?.pixKey || "");
    setBankName(cfg?.bankName || "");
    setBankClientId(cfg?.bankClientId || "");
    setBankClientSecret(cfg?.bankClientSecret || "");
    setBankCertPath(cfg?.bankCertPath || "");
    setBankCertPassword(cfg?.bankCertPassword || "");
  };

  // Quando configs carregarem, sincroniza o form da loja atual
  useEffect(() => {
    fillFormFromSlug(storeSlug);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [configsBySlug]);

  // Quando trocar a loja no select
  useEffect(() => {
    fillFormFromSlug(storeSlug);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [storeSlug]);

  // Salva (sempre por slug) — PUT /paymentconfigs/{slug}
  const handleSave = async () => {
    try {
      const body = {
        // Força salvar a store em slug para casar com a Loja (efapi/palmital/passo)
        store: storeSlug,
        cnpj,
        provider,
        isActive,
        mpPublicKey,
        mpAccessToken,
        pixKey,
        bankName,
        bankClientId,
        bankClientSecret,
        bankCertPath,
        bankCertPassword,
      };

      const tryPut = async (withAuth) =>
        axios.put(
          `${API_URL}/paymentconfigs/${encodeURIComponent(storeSlug)}`,
          body,
          withAuth ? auth : undefined
        );

      try {
        await tryPut(true);
      } catch (e) {
        if (e?.response?.status === 401) throw e;
        // pode ser rota pública no seu backend
        await tryPut(false);
      }

      const label = STORES.find((s) => s.slug === storeSlug)?.label ?? storeSlug;
      toast.success(`Configuração da loja "${label}" salva!`);
      loadAll();
    } catch (e) {
      console.error(e);
      toast.error("Falha ao salvar configuração.");
    }
  };

  // Excluir (sempre por slug) — DELETE /paymentconfigs/{slug}
  const handleDelete = async () => {
    const label = STORES.find((s) => s.slug === storeSlug)?.label ?? storeSlug;
    if (!window.confirm(`Remover configuração da loja "${label}"?`)) return;

    try {
      const tryDelete = async (withAuth) =>
        axios.delete(
          `${API_URL}/paymentconfigs/${encodeURIComponent(storeSlug)}`,
          withAuth ? auth : undefined
        );

      try {
        await tryDelete(true);
      } catch (e) {
        if (e?.response?.status === 401) throw e;
        await tryDelete(false);
      }

      toast.info(`Configuração da loja "${label}" removida.`);
      loadAll();
    } catch (e) {
      console.error(e);
      toast.error("Falha ao remover configuração.");
    }
  };

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-white to-gray-50 py-10 px-4 text-gray-800">
      <div className="mx-auto max-w-5xl">
        <div className="mb-6 flex items-center justify-between">
          <h1 className="text-2xl font-extrabold text-gray-900">⚙️ Pagamentos por Loja (CNPJ)</h1>
          <button
            onClick={() => window.history.back()}
            className="rounded-md border border-gray-300 bg-white px-4 py-1 text-sm text-gray-600 hover:bg-gray-100"
          >
            ← Voltar
          </button>
        </div>

        <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
          {/* Coluna esquerda */}
          <div className="rounded-xl border bg-white p-4 shadow">
            <h2 className="mb-3 text-lg font-bold text-gray-800">Lojas configuradas</h2>

            {loading ? (
              <p className="text-sm text-gray-500">Carregando…</p>
            ) : (
              <ul className="divide-y divide-gray-100">
                {STORES.map(({ label, slug }) => {
                  const cfg = configsBySlug.get(slug);
                  return (
                    <li key={slug} className="flex items-center justify-between py-3">
                      <div>
                        <div className="font-semibold">{label}</div>
                        <div className="text-xs text-gray-600">
                          {cfg ? (
                            <>
                              <span className="mr-2">CNPJ: {cfg.cnpj || "—"}</span>
                              <span className="mr-2">Prov.: {cfg.provider || "—"}</span>
                              <span>Status: {cfg.isActive ? "Ativo" : "Inativo"}</span>
                            </>
                          ) : (
                            <span className="text-amber-700">Sem configuração</span>
                          )}
                        </div>
                      </div>
                      <button
                        onClick={() => setStoreSlug(slug)}
                        className={`rounded px-3 py-1 text-sm font-semibold ${
                          storeSlug === slug
                            ? "bg-blue-600 text-white"
                            : "bg-gray-100 text-gray-800 hover:bg-gray-200"
                        }`}
                      >
                        {storeSlug === slug ? "Selecionado" : "Selecionar"}
                      </button>
                    </li>
                  );
                })}
              </ul>
            )}
          </div>

          {/* Coluna direita */}
          <div className="rounded-xl border bg-white p-4 shadow">
            <h2 className="mb-3 text-lg font-bold text-gray-800">Editar configuração</h2>

            <div className="mb-3">
              <label className="block text-sm font-medium text-gray-700">Loja</label>
              <select
                value={storeSlug}
                onChange={(e) => setStoreSlug(e.target.value)}
                className="mt-1 w-full rounded border border-gray-300 px-3 py-2 text-sm"
              >
                {STORES.map(({ label, slug }) => (
                  <option key={slug} value={slug}>
                    {label}
                  </option>
                ))}
              </select>
            </div>

            <div className="mb-3">
              <label className="block text-sm font-medium text-gray-700">CNPJ</label>
              <input
                type="text"
                value={cnpj}
                onChange={(e) => setCnpj(e.target.value)}
                placeholder="00.000.000/0000-00"
                className="mt-1 w-full rounded border border-gray-300 px-3 py-2 text-sm"
              />
            </div>

            <div className="mb-3 grid grid-cols-1 gap-3 sm:grid-cols-2">
              <div>
                <label className="block text-sm font-medium text-gray-700">Provedor</label>
                <select
                  value={provider}
                  onChange={(e) => setProvider(e.target.value)}
                  className="mt-1 w-full rounded border border-gray-300 px-3 py-2 text-sm"
                >
                  <option value="mercadopago">Mercado Pago</option>
                  <option value="pix_banco">PIX (Banco)</option>
                </select>
              </div>
              <div className="flex items-end">
                <label className="inline-flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={isActive}
                    onChange={(e) => setIsActive(e.target.checked)}
                    className="h-4 w-4"
                  />
                  <span className="text-sm text-gray-700">Ativo</span>
                </label>
              </div>
            </div>

            {/* Mercado Pago */}
            <div className="mb-2 rounded-lg border border-blue-200 bg-blue-50 p-3">
              <div className="mb-2 text-sm font-semibold text-blue-800">
                Credenciais Mercado Pago
              </div>
              <label className="block text-xs text-gray-700">Public Key</label>
              <input
                type="text"
                value={mpPublicKey}
                onChange={(e) => setMpPublicKey(e.target.value)}
                placeholder="APP_USR-..."
                className="mb-2 mt-1 w-full rounded border border-gray-300 px-3 py-2 text-sm"
              />
              <label className="block text-xs text-gray-700">Access Token</label>
              <input
                type="text"
                value={mpAccessToken}
                onChange={(e) => setMpAccessToken(e.target.value)}
                placeholder="APP_USR-..."
                className="mt-1 w-full rounded border border-gray-300 px-3 py-2 text-sm"
              />
            </div>

            {/* PIX Banco (futuro) */}
            <details className="mb-3 rounded-lg border border-gray-200 bg-gray-50 p-3">
              <summary className="cursor-pointer text-sm font-semibold text-gray-800">
                PIX (Banco) — avançado
              </summary>
              <div className="mt-2 grid grid-cols-1 gap-3">
                <div>
                  <label className="block text-xs text-gray-700">Chave PIX</label>
                  <input
                    type="text"
                    value={pixKey}
                    onChange={(e) => setPixKey(e.target.value)}
                    placeholder="CNPJ/EVP/email/telefone"
                    className="mt-1 w-full rounded border border-gray-300 px-3 py-2 text-sm"
                  />
                </div>
                <div>
                  <label className="block text-xs text-gray-700">Banco</label>
                  <input
                    type="text"
                    value={bankName}
                    onChange={(e) => setBankName(e.target.value)}
                    placeholder="Itaú / Sicredi / ... "
                    className="mt-1 w-full rounded border border-gray-300 px-3 py-2 text-sm"
                  />
                </div>
                <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
                  <div>
                    <label className="block text-xs text-gray-700">Client ID</label>
                    <input
                      type="text"
                      value={bankClientId}
                      onChange={(e) => setBankClientId(e.target.value)}
                      className="mt-1 w-full rounded border border-gray-300 px-3 py-2 text-sm"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-700">Client Secret</label>
                    <input
                      type="password"
                      value={bankClientSecret}
                      onChange={(e) => setBankClientSecret(e.target.value)}
                      className="mt-1 w-full rounded border border-gray-300 px-3 py-2 text-sm"
                    />
                  </div>
                </div>
                <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
                  <div>
                    <label className="block text-xs text-gray-700">Cert Path</label>
                    <input
                      type="text"
                      value={bankCertPath}
                      onChange={(e) => setBankCertPath(e.target.value)}
                      className="mt-1 w-full rounded border border-gray-300 px-3 py-2 text-sm"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-700">Cert Password</label>
                    <input
                      type="password"
                      value={bankCertPassword}
                      onChange={(e) => setBankCertPassword(e.target.value)}
                      className="mt-1 w-full rounded border border-gray-300 px-3 py-2 text-sm"
                    />
                  </div>
                </div>
              </div>
            </details>

            <div className="mt-4 flex items-center gap-2">
              <button
                onClick={handleSave}
                className="rounded bg-green-600 px-4 py-2 text-sm font-semibold text-white hover:bg-green-700"
              >
                💾 Salvar
              </button>
              <button
                onClick={handleDelete}
                className="rounded bg-red-600 px-4 py-2 text-sm font-semibold text-white hover:bg-red-700"
              >
                🗑 Remover Configuração
              </button>
            </div>

            <p className="mt-3 text-xs text-gray-500">
              Importante: salvamos internamente os nomes das lojas como slugs{" "}
              <code>efapi</code>, <code>palmital</code>, <code>passo</code>. A Loja
              consome <code>/paymentconfigs/&lt;slug&gt;</code>, então isso garante que o
              botão do Mercado Pago apareça quando <code>provider</code> for{" "}
              <code>mercadopago</code> e <code>isActive</code> estiver marcado.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
```

./src/SettingsManager.tsx:
```tsx
import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

const API_URL = "https://backend-eskimo.onrender.com/api";

export default function SettingsManager() {
  const [deliveryRate, setDeliveryRate] = useState<number | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    fetchSettings();
  }, []);

  const fetchSettings = async () => {
    try {
      const res = await axios.get(`${API_URL}/settings`);
      setDeliveryRate(res.data.deliveryRate);
    } catch (err) {
      console.log("Nenhuma configuração encontrada.");
      setDeliveryRate(null);
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    setSaving(true);
    try {
      await axios.put(`${API_URL}/settings`, {
        deliveryRate: deliveryRate ?? 0,
      });
      alert("✅ Valor por KM salvo com sucesso!");
    } catch (err) {
      console.error("Erro ao salvar:", err);
      alert("❌ Erro ao salvar configuração.");
    } finally {
      setSaving(false);
    }
  };

  return (
    
    <div className="flex min-h-screen flex-col items-center justify-center bg-green-50 px-4">
      <div className="w-full max-w-md rounded-2xl bg-white p-6 shadow-xl"><div style={{ display: "flex", justifyContent: "center", marginBottom: "1.5rem" }}>
      <button
              onClick={() => window.history.back()}
              className="rounded-md border border-gray-300 bg-white px-4 py-1 text-sm text-gray-600 hover:bg-gray-100"
            >
              ← Voltar
            </button>
</div>

        <h1 className="mb-6 text-center text-2xl font-bold text-green-700">
          ⚙️ Configuração de Entrega
        </h1>
       
        {loading ? (
          <p className="text-center text-gray-600">Carregando...</p>
        ) : (
          <>
            <label className="mb-2 block text-sm font-medium text-gray-700">
              Valor por quilômetro (R$):
            </label>
            <input
              type="number"
              min="0"
              step="0.1"
              value={deliveryRate ?? ""}
              onChange={(e) => setDeliveryRate(parseFloat(e.target.value))}
              className="mb-4 w-full rounded border px-4 py-2 text-gray-800 shadow"
              placeholder="Ex: 2.5"
            />

            <button
              onClick={handleSave}
              disabled={saving}
              className="w-full rounded bg-green-600 px-4 py-2 font-semibold text-white shadow hover:bg-green-700 disabled:opacity-60"
            >
              {saving ? "Salvando..." : "💾 Salvar Configuração"}
            </button>
          </>
        )}
      </div>
    </div>
  );
}

```

./src/Pedidos.jsx:
```jsx
import { useEffect, useState, useRef } from "react";
import axios from "axios";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

// ✅ Usa variável de ambiente com fallback para DEV
//    Ex.: VITE_API_URL=http://localhost:8080/api
const API_URL = import.meta.env.VITE_API_URL ?? "http://localhost:8080/api";

// ✅ Headers com token (JWT) para todas as chamadas protegidas
const auth = {
  headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
};

export default function Pedidos() {
  const [pedidos, setPedidos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [pedidoSelecionado, setPedidoSelecionado] = useState(null);
  const [filtroStatus, setFiltroStatus] = useState("todos");
  const [filtroStore, setFiltroStore] = useState("todos");
  const [gerandoRelatorio, setGerandoRelatorio] = useState(false);
  const [mostrarModalExcluirTodos, setMostrarModalExcluirTodos] = useState(false);

  // 🔎 Filtros de data para relatório
  const [fromDate, setFromDate] = useState(""); // "YYYY-MM-DD"
  const [toDate, setToDate] = useState("");     // "YYYY-MM-DD"

  const lojasFixas = ["Efapi", "Palmital", "Passo dos Fortes"];
  const lastIds = useRef(new Set());

  const mapStore = (store) => {
    if (!store) return "";
    const lower = store.toLowerCase();
    if (lower.includes("passo")) return "passo";
    if (lower.includes("efapi")) return "efapi";
    if (lower.includes("palmital")) return "palmital";
    return lower;
  };

  const getDataPedido = (pedido) => {
    const rawDate =
      pedido.createdAt || pedido.created_at || pedido.CreatedAt || pedido.date;
    return rawDate ? new Date(rawDate) : null;
  };

  const fetchPedidos = () => {
    axios
      .get(`${API_URL}/orders`, auth)
      .then((res) => {
        const novos = res.data.filter((p) => !lastIds.current.has(p.id));
        if (novos.length > 0 && lastIds.current.size > 0) {
          toast.info(`🆕 ${novos.length} novo(s) pedido(s) recebido(s)!`);
        }
        res.data.forEach((p) => lastIds.current.add(p.id));
        setPedidos(res.data);
      })
      .catch(() => {
        toast.error("Erro ao buscar pedidos.");
      })
      .finally(() => setLoading(false));
  };

  useEffect(() => {
    fetchPedidos();
    const interval = setInterval(fetchPedidos, 10000);
    return () => clearInterval(interval);
  }, []);

  const marcarComoEntregue = async (id) => {
    try {
      await axios.patch(`${API_URL}/orders/${id}/deliver`, null, auth);
      toast.success("Pedido marcado como entregue!");
      fetchPedidos();
    } catch {
      toast.error("Erro ao atualizar pedido.");
    }
  };

  const confirmarPedido = async () => {
    if (!pedidoSelecionado) return;
    try {
      await axios.patch(
        `${API_URL}/orders/${pedidoSelecionado.id}/confirm`,
        null,
        auth
      );
      toast.success("Pagamento confirmado!");
      setPedidoSelecionado(null);
      fetchPedidos();
    } catch {
      toast.error("Erro ao confirmar pagamento.");
    }
  };

  const cancelarPedido = async (id) => {
    if (!window.confirm("Cancelar este pedido? O estoque será devolvido para a loja.")) return;
    try {
      await axios.patch(`${API_URL}/orders/${id}/cancel`, null, auth);
      toast.success("Pedido cancelado e estoque devolvido!");
      fetchPedidos();
    } catch {
      toast.error("Erro ao cancelar pedido.");
    }
  };

  const excluirPedido = async (id) => {
    if (!window.confirm("Tem certeza que deseja excluir este pedido?")) return;
    try {
      await axios.delete(`${API_URL}/orders/${id}`, auth);
      toast.info("Pedido excluído com sucesso.");
      fetchPedidos();
    } catch {
      toast.error("Erro ao excluir pedido.");
    }
  };

  const excluirTodosPedidos = async () => {
    try {
      await axios.delete(`${API_URL}/orders/clear`, auth);
      toast.success("Todos os pedidos foram excluídos.");
      setMostrarModalExcluirTodos(false);
      fetchPedidos();
    } catch {
      toast.error("Erro ao excluir todos os pedidos.");
    }
  };

  // ✅ Query string a partir de from/to (YYYY-MM-DD)
  const buildReportQuery = () => {
    const params = new URLSearchParams();
    if (fromDate) params.append("from", fromDate);
    if (toDate) params.append("to", toDate);
    const qs = params.toString();
    return qs ? `?${qs}` : "";
  };

  // ✅ Baixa PDF por loja (com JWT, via blob)
  const baixarPDFPorLoja = async (lojaSlug) => {
    const qs = buildReportQuery();
    const fileSuffix =
      fromDate && toDate
        ? `_${fromDate}-${toDate}`
        : fromDate
        ? `_${fromDate}-`
        : toDate
        ? `_-${toDate}`
        : "";
    const fileName = `relatorio-${lojaSlug}${fileSuffix}.pdf`;

    const { data: blob } = await axios.get(`${API_URL}/reports/${lojaSlug}${qs}`, {
      ...auth,
      responseType: "blob",
    });

    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  };

  // 🧾 Gera e BAIXA os PDFs (sem WhatsApp)
  const gerarRelatoriosPDF = async () => {
    setGerandoRelatorio(true);
    toast.info("Gerando PDF...");

    try {
      let lojasParaGerar = [];

      if (filtroStore === "todos") {
        lojasParaGerar = ["efapi", "palmital", "passo"];
      } else {
        lojasParaGerar = [mapStore(filtroStore)];
      }

      // Baixa 1 PDF por loja (com auth, via blob)
      for (let loja of lojasParaGerar) {
        await baixarPDFPorLoja(loja);
      }

      const periodo =
        fromDate || toDate
          ? ` (${fromDate || "início"} → ${toDate || "hoje"})`
          : "";

      toast.success(`Relatório(s) baixado(s) com sucesso${periodo}!`);
    } catch (e) {
      console.error(e);
      toast.error("Falha ao gerar/baixar relatórios.");
    } finally {
      setGerandoRelatorio(false);
    }
  };

  const pedidosFiltrados = pedidos.filter((p) => {
    const statusOk = filtroStatus === "todos" || p.status === filtroStatus;
    const storeOk = filtroStore === "todos" || mapStore(p.store) === mapStore(filtroStore);
    return statusOk && storeOk;
  });

  const formatDate = (date) => {
    const d = new Date(date);
    return d.toISOString().split("T")[0];
  };

  const pedidosAgrupados = pedidosFiltrados.reduce((acc, pedido) => {
    const dataPedido = getDataPedido(pedido);
    const data = dataPedido ? formatDate(dataPedido) : "Data desconhecida";
    if (!acc[data]) acc[data] = [];
    acc[data].push(pedido);
    return acc;
  }, {});

  const datasOrdenadas = Object.keys(pedidosAgrupados).sort((a, b) => new Date(b) - new Date(a));

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-white to-gray-50 py-10 px-4 text-gray-800">
      <div className="mx-auto max-w-6xl">
        <div className="mb-6 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
          <h1 className="text-3xl font-extrabold text-gray-900">📦 Pedidos Recebidos</h1>
          <div className="flex flex-wrap gap-2">
            <select
              className="rounded-md border border-gray-300 bg-white px-3 py-1 text-sm text-gray-700"
              value={filtroStore}
              onChange={(e) => setFiltroStore(e.target.value)}
            >
              <option value="todos">Todas as Unidades</option>
              {lojasFixas.map((store) => (
                <option key={store} value={store}>
                  {store}
                </option>
              ))}
            </select>

            <select
              className="rounded-md border border-gray-300 bg-white px-3 py-1 text-sm text-gray-700"
              value={filtroStatus}
              onChange={(e) => setFiltroStatus(e.target.value)}
            >
              <option value="todos">Todos</option>
              <option value="pendente">Pendentes</option>
              <option value="pago">Pagos</option>
              <option value="entregue">Entregues</option>
              <option value="cancelado">Cancelados</option>
            </select>

            {/* 🔎 Filtros de período (apenas para relatório) */}
            <input
              type="date"
              value={fromDate}
              onChange={(e) => setFromDate(e.target.value)}
              className="rounded-md border border-gray-300 bg-white px-3 py-1 text-sm text-gray-700"
              title="Data inicial do relatório"
            />
            <input
              type="date"
              value={toDate}
              onChange={(e) => setToDate(e.target.value)}
              className="rounded-md border border-gray-300 bg-white px-3 py-1 text-sm text-gray-700"
              title="Data final do relatório"
            />

            <button
              onClick={() => window.history.back()}
              className="rounded-md border border-gray-300 bg-white px-4 py-1 text-sm text-gray-600 hover:bg-gray-100"
            >
              ← Voltar
            </button>
            <button
              onClick={() => setMostrarModalExcluirTodos(true)}
              className="rounded bg-red-600 px-4 py-2 text-sm font-bold text-white hover:bg-red-700"
            >
              🗑 Limpar Histórico
            </button>
          </div>
        </div>

        {/* Relatórios */}
        <div className="mb-8 rounded-lg border bg-white p-4 shadow-sm">
          <h2 className="mb-2 text-lg font-bold text-blue-800">📄 Relatórios (download)</h2>
          <div className="flex flex-col gap-2 sm:flex-row">
            <button
              onClick={gerarRelatoriosPDF}
              disabled={gerandoRelatorio}
              className="rounded bg-blue-600 px-4 py-2 text-sm font-bold text-white hover:bg-blue-700"
            >
              {gerandoRelatorio ? "Gerando..." : "⬇️ Baixar PDF(s) por loja"}
            </button>
          </div>
          <p className="mt-2 text-xs text-gray-500">
            Observação: os relatórios somam apenas pedidos <strong>pagos</strong> e <strong>entregues</strong>.
            Pedidos <em>pendentes</em> e <em>cancelados</em> ficam fora da conta.
          </p>
          {(fromDate || toDate) && (
            <p className="mt-1 text-xs text-gray-500">
              Período aplicado: <strong>{fromDate || "início"}</strong> → <strong>{toDate || "hoje"}</strong>
            </p>
          )}
        </div>

        {loading ? (
          <div className="text-center text-lg text-gray-500">Carregando pedidos...</div>
        ) : datasOrdenadas.length === 0 ? (
          <div className="text-center text-lg text-gray-500">Nenhum pedido encontrado.</div>
        ) : (
          datasOrdenadas.map((data) => {
            const lista = pedidosAgrupados[data];
            const dataFormatada = new Date(data).toLocaleDateString();
            return (
              <div key={data}>
                <h2 className="mt-6 mb-2 text-lg font-bold text-gray-700">📅 {dataFormatada}</h2>
                <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
                  {lista.map((pedido) => {
                    const dataPedido = getDataPedido(pedido);
                    const isHoje = dataPedido && formatDate(dataPedido) === formatDate(new Date());

                    // ✅ Horário com fuso "America/Sao_Paulo"
                    const horario = dataPedido
                      ? new Date(dataPedido).toLocaleTimeString("pt-BR", {
                          hour: "2-digit",
                          minute: "2-digit",
                          hour12: false,
                          timeZone: "America/Sao_Paulo",
                        })
                      : "Sem horário";

                    return (
                      <div
                        key={pedido.id}
                        className={`rounded-xl border p-6 shadow-md hover:shadow-lg transition ${
                          pedido.deliveryType === "entregar"
                            ? "bg-blue-50 border-blue-200"
                            : "bg-white border-gray-100"
                        } ${isHoje ? "ring-2 ring-green-400" : ""}`}
                      >
                        <div className="mb-3 space-y-1 text-sm text-gray-700">
                          <div><strong>Número do Pedido:</strong> #{pedido.id}</div>
                          <div><strong>Horário:</strong> {horario}</div>
                          <div><strong>Cliente:</strong> {pedido.customerName}</div>
                          <div><strong>Telefone:</strong> {pedido.phoneNumber || "Não informado"}</div>
                          <div><strong>Unidade:</strong> {pedido.store}</div>
                          <div><strong>Entrega:</strong> {pedido.deliveryType}</div>
                          {pedido.address && (
                            <div>
                              <strong>Endereço:</strong> {pedido.address}, {pedido.street}, nº {pedido.number}{" "}
                              {pedido.complement && `, ${pedido.complement}`}
                            </div>
                          )}
                          <div><strong>Entrega (frete):</strong> R$ {pedido.deliveryFee?.toFixed(2) ?? "0,00"}</div>
                          <div><strong>Total:</strong> R$ {pedido.total.toFixed(2)}</div>
                          <div>
                            <strong>Status:</strong>{" "}
                            <span
                              className={`font-semibold ${
                                pedido.status === "pago"
                                  ? "text-green-600"
                                  : pedido.status === "entregue"
                                  ? "text-blue-600"
                                  : pedido.status === "cancelado"
                                  ? "text-amber-700"
                                  : "text-yellow-600"
                              }`}
                            >
                              {pedido.status?.toUpperCase() || "PENDENTE"}
                            </span>
                          </div>
                        </div>

                        <ul className="mt-3 divide-y divide-gray-100 text-sm">
                          {pedido.items.map((item, index) => (
                            <li key={index} className="flex items-center justify-between gap-4 py-2">
                              <div className="flex items-center gap-2">
                                <img
                                  src={item.imageUrl}
                                  alt={item.name}
                                  className="h-10 w-10 rounded-md object-cover border border-gray-200"
                                />
                                <span>{item.name} (x{item.quantity})</span>
                              </div>
                              <span className="font-medium">R$ {(item.price * item.quantity).toFixed(2)}</span>
                            </li>
                          ))}
                        </ul>

                        <div className="mt-4 flex gap-2 flex-wrap">
                          {pedido.status === "pendente" && (
                            <>
                              <button
                                onClick={() => setPedidoSelecionado(pedido)}
                                className="rounded bg-green-600 px-4 py-2 text-sm font-semibold text-white hover:bg-green-700"
                              >
                                ✅ Confirmar Pagamento
                              </button>
                              <button
                                onClick={() => cancelarPedido(pedido.id)}
                                className="rounded bg-amber-600 px-4 py-2 text-sm font-semibold text-white hover:bg-amber-700"
                              >
                                🛑 Cancelar Pedido
                              </button>
                            </>
                          )}
                          {pedido.status === "pago" && (
                            <>
                              <button
                                onClick={() => marcarComoEntregue(pedido.id)}
                                className="rounded bg-blue-600 px-4 py-2 text-sm font-semibold text-white hover:bg-blue-700"
                              >
                                📬 Marcar como Entregue
                              </button>
                              <button
                                onClick={() => cancelarPedido(pedido.id)}
                                className="rounded bg-amber-600 px-4 py-2 text-sm font-semibold text-white hover:bg-amber-700"
                              >
                                🛑 Cancelar Pedido
                              </button>
                            </>
                          )}
                          <button
                            onClick={() => excluirPedido(pedido.id)}
                            className="rounded bg-red-600 px-4 py-2 text-sm font-semibold text-white hover:bg-red-700"
                          >
                            🗑 Excluir Pedido
                          </button>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            );
          })
        )}
      </div>

      {/* Modal Confirmar Pagamento */}
      {pedidoSelecionado && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
          <div className="w-full max-w-sm rounded-2xl bg-white p-6 text-center shadow-xl">
            <h2 className="text-xl font-bold text-gray-800">Confirmar Pagamento</h2>
            <p className="mt-2 text-sm text-gray-600">
              Deseja confirmar que o pagamento do pedido de{" "}
              <strong>{pedidoSelecionado.customerName}</strong> foi realizado?
            </p>
            <div className="mt-6 flex justify-center gap-4">
              <button
                onClick={() => setPedidoSelecionado(null)}
                className="rounded bg-gray-100 px-4 py-2 text-sm text-gray-800 hover:bg-gray-200"
              >
                Cancelar
              </button>
              <button
                onClick={confirmarPedido}
                className="rounded bg-green-600 px-4 py-2 text-sm font-semibold text-white hover:bg-green-700"
              >
                Confirmar
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal Excluir Todos */}
      {mostrarModalExcluirTodos && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
          <div className="w-full max-w-sm rounded-2xl bg-white p-6 text-center shadow-xl">
            <h2 className="text-xl font-bold text-gray-800">⚠️ Limpar Histórico</h2>
            <p className="mt-2 text-sm text-gray-600">
              Tem certeza que deseja excluir <strong>todos os pedidos</strong>? Essa ação não poderá ser desfeita.
            </p>
            <div className="mt-6 flex justify-center gap-4">
              <button
                onClick={() => setMostrarModalExcluirTodos(false)}
                className="rounded bg-gray-100 px-4 py-2 text-sm text-gray-800 hover:bg-gray-200"
              >
                Cancelar
              </button>
              <button
                onClick={excluirTodosPedidos}
                className="rounded bg-red-600 px-4 py-2 text-sm font-semibold text-white hover:bg-red-700"
              >
                Excluir Tudo
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

```

./src/services/api.js:
```js
import axios from "axios";

const API_URL = "https://backend-eskimo.onrender.com/api";

const api = axios.create({
  baseURL: API_URL,
});

api.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default api;

```

./src/App.jsx:
```jsx
// App.jsx atualizado para funcionar em sincronia com estoque automático baseado em quantidade
import React, { useState, useEffect } from "react";
import api from "@/services/api";
import { useNavigate } from "react-router-dom";

export default function AdminPanel() {
  const navigate = useNavigate();

  const [form, setForm] = useState({
    name: "",
    description: "",
    price: "",
    imageUrl: "",
    categoryId: ""
  });

  const [categories, setCategories] = useState([]);
  const [subcategories, setSubcategories] = useState([]);
  const [filteredSubcategories, setFilteredSubcategories] = useState([]);
  const [subcategoryId, setSubcategoryId] = useState("");
  const [estoques, setEstoques] = useState({ efapi: 1, palmital: 1, passo: 1 });
  
  useEffect(() => {
    const checkSync = async () => {
      const precisaAtualizar = localStorage.getItem("categoriasAtualizadas");
      if (precisaAtualizar === "true") {
        await fetchCategories();
        localStorage.removeItem("categoriasAtualizadas");
      }
    };
    fetchCategories();
    fetchSubcategories();
    checkSync();
  }, []);
  
  useEffect(() => {
    fetchCategories();
    fetchSubcategories();
  }, []);

  const fetchCategories = async () => {
    try {
      const result = await api.get("/categories");
      setCategories(result.data);
    } catch (error) {
      console.error("Erro ao carregar categorias:", error);
    }
  };

  const fetchSubcategories = async () => {
    try {
      const result = await api.get("/subcategories");
      setSubcategories(result.data);
    } catch (error) {
      console.error("Erro ao carregar subcategorias:", error);
    }
  };

  useEffect(() => {
    const filtered = subcategories.filter(
      (s) => s.categoryId === parseInt(form.categoryId)
    );
    setFilteredSubcategories(filtered);
    setSubcategoryId("");
  }, [form.categoryId, subcategories]);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleEstoqueChange = (store, value) => {
    setEstoques((prev) => ({
      ...prev,
      [store]: parseInt(value) || 0
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const data = {
      name: form.name,
      description: form.description,
      price: parseFloat(form.price),
      imageUrl: form.imageUrl,
      categoryId: parseInt(form.categoryId),
      subcategoryId: subcategoryId ? parseInt(subcategoryId) : null
    };

    try {
      const res = await api.post("/products", data);
      const productId = res.data.id;
      await api.post(`/stock/${productId}`, estoques);

      alert("✅ Produto cadastrado com sucesso!");
      setForm({ name: "", description: "", price: "", imageUrl: "", categoryId: "" });
      setSubcategoryId("");
      setEstoques({ efapi: 0, palmital: 0, passo: 0 });
    } catch (error) {
      console.error("Erro:", error.response?.data || error.message);
      alert("❌ Erro ao salvar produto.");
    }
  };

  const handleLogout = () => {
    localStorage.removeItem("token");
    navigate("/");
  };

  return (
    <div style={containerStyle}>
      <div style={cardStyle}>
        <div style={{ display: "flex", justifyContent: "flex-end", marginBottom: "1rem" }}>
          <button onClick={handleLogout} style={btnDanger}>🚪 Sair</button>
        </div>

        <h1 style={titleStyle}>Eskimó</h1>
        <h2 style={subtitleStyle}>Cadastro de Produto</h2>
        <p style={textStyle}>Preencha os campos abaixo para adicionar um novo produto.</p>

        <form onSubmit={handleSubmit} style={formGridStyle}>
          <Input label="Nome" name="name" value={form.name} onChange={handleChange} />
          <Input label="Descrição" name="description" value={form.description} onChange={handleChange} />
          <Input label="Preço" name="price" value={form.price} onChange={handleChange} />
          <Input label="Imagem (URL)" name="imageUrl" value={form.imageUrl} onChange={handleChange} />

          <Dropdown label="Categoria" name="categoryId" value={form.categoryId} onChange={handleChange} options={categories} />
          <Dropdown label="Subcategoria" value={subcategoryId} onChange={(e) => setSubcategoryId(e.target.value)} options={filteredSubcategories} />

          <div className="w-full px-6 py-4">
      <label className="block mb-2 text-lg font-semibold text-gray-700">Estoque por loja:</label>
      <div className="grid grid-cols-3 gap-4">
        {Object.keys(estoques).map((store) => (
          <div key={store} className="flex flex-col">
            <label className="mb-1 text-gray-600">{store.charAt(0).toUpperCase() + store.slice(1)}</label>
            <input
              type="number"
              min="0"
              value={estoques[store]}
              onChange={(e) => handleEstoqueChange(store, e.target.value)}
              className="w-full rounded-lg border border-gray-300 bg-white px-3 py-2 text-gray-800 focus:outline-none focus:ring-2 focus:ring-indigo-400"
            />
          </div>
        ))}
            </div>
          </div>

          <div style={buttonGroupStyle}>
            <button type="submit" style={btnPrimary}>Cadastrar Produto</button>
            <button type="button" onClick={() => navigate("/produtos")} style={btnOutline}>📦 Ver Produtos</button>
            <button type="button" onClick={() => navigate("/estoque")} style={btnOutline}>🏪 Estoque por Loja</button>
            <button type="button" onClick={() => navigate("/pedidos")} style={btnOutline}>✅ Ver Pedidos</button>
            <button type="button" onClick={() => navigate("/configuracoes")} style={btnOutline}>⚙️ Configurações de Entrega</button>
            <button type="button" onClick={() => navigate("/categorias")} style={btnOutline}>⚙️ Categorias </button>
            <button type="button" onClick={() => navigate("/pagamentos")} style={btnOutline}>💳 Pagamentos por Loja</button>

          </div>
        </form>

        <h2
  style={{
    fontSize: "1.2rem",
    color: "#065f46",
    fontWeight: "bold",
    marginTop: "2rem",
  }}
>
  EISTALT{" "}
  <a
    href="https://eistalt.vercel.app/"
    target="_blank"
    rel="noopener noreferrer"
    style={{
      color: "#059669", // verde elegante
      textDecoration: "none",
      fontWeight: "600",
    }}
    onMouseOver={(e) => (e.currentTarget.style.textDecoration = "underline")}
    onMouseOut={(e) => (e.currentTarget.style.textDecoration = "none")}
  >
    https://eistalt.vercel.app/
  </a>
</h2>

      </div>
    </div>
  );
}

function Input({ label, name, value, onChange }) {
  return (
    <div style={{ display: "flex", flexDirection: "column", textAlign: "left" }}>
      <label htmlFor={name} style={labelStyle}>{label}</label>
      <input id={name} name={name} value={value} onChange={onChange} required style={inputStyle} />
    </div>
  );
}

function Dropdown({ label, name, value, onChange, options }) {
  return (
    <div style={{ display: "flex", flexDirection: "column", textAlign: "left" }}>
      <label style={labelStyle}>{label}</label>
      <select name={name} value={value} onChange={onChange} style={inputStyle} required>
        <option value="">Selecione...</option>
        {options.map((opt) => (
          <option key={opt.id} value={opt.id}>{opt.name}</option>
        ))}
      </select>
    </div>
  );
}

const containerStyle = {
  minHeight: "100vh", background: "#f0fdf4", display: "flex", justifyContent: "center", alignItems: "center", padding: "2rem", animation: "fadeIn 0.8s ease-in-out"
};

const cardStyle = {
  width: "100%", maxWidth: "1000px", background: "white", borderRadius: "1.5rem", padding: "3rem", boxShadow: "0 10px 30px rgba(0,0,0,0.1)", textAlign: "center"
};

const formGridStyle = {
  display: "grid", gridTemplateColumns: "1fr 1fr", gap: "1.5rem", marginBottom: "2rem"
};

const titleStyle = {
  fontSize: "3rem", color: "#065f46", fontWeight: "800", marginBottom: "1.5rem"
};

const subtitleStyle = {
  fontSize: "2rem", color: "#065f46", fontWeight: "bold", marginBottom: "1rem"
};

const textStyle = {
  fontSize: "1rem", color: "#4b5563", marginBottom: "2rem"
};

const buttonGroupStyle = {
  gridColumn: "span 2", display: "flex", flexDirection: "column", gap: "0.75rem"
};

const labelStyle = {
  marginBottom: "0.25rem", fontSize: "0.875rem", color: "#374151"
};

const inputStyle = {
  width: "100%", padding: "0.75rem", borderRadius: "0.75rem", border: "1px solid #cbd5e1", background: "#f9fdfb", color: "#111827", fontSize: "1rem", boxSizing: "border-box", outline: "none", transition: "border-color 0.3s ease"
};

const btnPrimary = {
  background: "#059669", color: "white", padding: "0.75rem 1.5rem", fontWeight: "bold", border: "none", borderRadius: "0.75rem", cursor: "pointer", fontSize: "1rem", transition: "background-color 0.3s ease"
};

const btnDanger = {
  background: "#dc2626", color: "white", padding: "0.5rem 1.25rem", borderRadius: "0.75rem", border: "none", cursor: "pointer", fontWeight: "bold", transition: "background-color 0.3s ease"
};

const btnOutline = {
  background: "transparent", color: "#065f46", padding: "0.75rem 1.5rem", fontWeight: "bold", border: "2px solid #065f46", borderRadius: "0.75rem", cursor: "pointer", fontSize: "1rem", transition: "all 0.3s ease"
};

```

./src/main.jsx:
```jsx
import { StrictMode, useState, useEffect } from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import "./index.css";

import SettingsManager from "./SettingsManager";
import Pedidos from "./Pedidos";
import App from "./App.jsx";
import ProductList from "./ProductList.jsx";
import Login from "./Login.jsx";
import PrivateRoute from "./PrivateRoute.jsx";
import HomePublic from "./HomePublic";
import CategoryManager from "./pages/CategoryManager";
import EstoquePorLoja from "./pages/EstoquePorLoja";
import PaymentSettings from "./PaymentSettings.jsx";


// 🦊 Splash screen para carregamento inicial
// eslint-disable-next-line react-refresh/only-export-components
function SplashScreen() {
  return (
    <div style={{
      minHeight: "100vh",
      background: "linear-gradient(to bottom right, #e0f2f1, #f0fdf4)",
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      alignItems: "center",
      animation: "fadeIn 0.8s ease-in-out"
    }}>
      <h1 style={{ fontSize: "2.5rem", color: "#065f46", fontWeight: "bold" }}>
        ESKIMÓ CHAPECÓ
      </h1>
      <p style={{ fontSize: "1.2rem", color: "#065f46", marginTop: "1rem" }}>
        Carregando...
      </p>
    </div>
  );
}

// 🌐 App principal com rotas
// eslint-disable-next-line react-refresh/only-export-components
function MainApp() {
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 1500);
    return () => clearTimeout(timer);
  }, []);

  if (loading) return <SplashScreen />;

  return (
    <>
      <Routes>
        <Route path="/" element={<Login />} />
        <Route path="/efapi" element={<HomePublic />} />
        <Route path="/cadastro" element={<PrivateRoute><App /></PrivateRoute>} />
        <Route path="/produtos" element={<PrivateRoute><ProductList /></PrivateRoute>} />
        <Route path="/categorias" element={<PrivateRoute><CategoryManager /></PrivateRoute>} />
        <Route path="/configuracoes" element={<PrivateRoute><SettingsManager /></PrivateRoute>} />
        <Route path="/pedidos" element={<PrivateRoute><Pedidos /></PrivateRoute>} />
        <Route path="/estoque" element={<PrivateRoute><EstoquePorLoja /></PrivateRoute>} />
        <Route path="/pagamentos" element={<PaymentSettings />} />

      </Routes>

      <ToastContainer
        position="top-center"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="colored"
      />
    </>
  );
}

// 🧠 Renderização do app
createRoot(document.getElementById("root")).render(
  <StrictMode>
    <BrowserRouter>
      <MainApp />
    </BrowserRouter>
  </StrictMode>
);

```

