src/PrivateRoute.jsx
import React, { useEffect, useState } from "react";
import { Navigate } from "react-router-dom";

function parseJwtEnabled(t) {
  try {
    const part = (t.split(".")[1] || "");
    const base64 = part.replace(/-/g, "+").replace(/_/g, "/");
    const json = decodeURIComponent(
      atob(base64)
        .split("")
        .map((c) => "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2))
        .join("")
    );
    const payload = JSON.parse(json);
    const enabledClaim = String(
      payload.isEnabled || payload.IsEnabled || "true"
    ).toLowerCase();
    return enabledClaim !== "false";
  } catch {
    return true;
  }
}

export default function PrivateRoute({ children }) {
  const [tokenExists, setTokenExists] = useState(!!localStorage.getItem("token"));

  useEffect(() => {
    const interval = setInterval(() => {
      const token = localStorage.getItem("token");
      setTokenExists(!!token);
    }, 300);
    return () => clearInterval(interval);
  }, []);

  const enabled = tokenExists
    ? parseJwtEnabled(localStorage.getItem("token") || "")
    : false;

  if (!tokenExists || !enabled) {
    return <Navigate to="/" replace />;
  }

  return children;
}
src/components/ui/ProductList.jsx
import { useEffect, useState } from "react";
import axios from "axios";

export default function ProductList() {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    axios
      .get("http://localhost:8080/api/products/list?page=1&pageSize=10")
      .then((res) => setProducts(res.data))
      .catch((err) => console.error("Erro ao buscar produtos:", err));
  }, []);

  return (
    <div className="p-6">
      <h2 className="text-xl font-bold mb-4">üõí Produtos Cadastrados</h2>
      <table className="w-full table-auto border rounded shadow">
        <thead className="bg-gray-100">
          <tr>
            <th className="px-4 py-2">Nome</th>
            <th className="px-4 py-2">Pre√ßo</th>
            <th className="px-4 py-2">Estoque</th>
            <th className="px-4 py-2">Categoria</th>
            <th className="px-4 py-2">A√ß√µes</th>
          </tr>
        </thead>
        <tbody>
          {products.map((p) => (
            <tr key={p.id} className="border-t">
              <td className="px-4 py-2">{p.name}</td>
              <td className="px-4 py-2">R$ {p.price.toFixed(2)}</td>
              <td className="px-4 py-2">{p.stock}</td>
              <td className="px-4 py-2">{p.categoryName}</td>
              <td className="px-4 py-2">
                <button className="mr-2 text-blue-500 hover:underline">Editar</button>
                <button className="text-red-500 hover:underline">Excluir</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
src/Login.jsx
import React, { useState } from "react";
import axios from "axios";
import { toast } from "react-toastify";
import Loading from 'react-loading';

const API_URL = "https://backend-eskimo.onrender.com/api";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!email || !password) {
      toast.warn("‚ö†Ô∏è Preencha todos os campos.");
      return;
    }

    setLoading(true);
    try {
      const res = await axios.post(`${API_URL}/auth/login`, { email, password });
      const token = res.data.token || "";
      localStorage.setItem("token", token);
      
      // 1) Preferir dados retornados pelo backend (patch j√° aplicado no /auth/login)
      let role = String(res.data?.role || "operator").toLowerCase();
      let permissions = res.data?.permissions ?? "{}";
      
      // 2) Fallback: decodificar JWT de forma robusta (base64url)
      if (!res.data?.role || !res.data?.permissions) {
        try {
          const part = (token.split(".")[1] || "");
          const base64 = part.replace(/-/g, "+").replace(/_/g, "/");
          const json = decodeURIComponent(
            atob(base64).split("").map(c => "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2)).join("")
          );
          const payload = JSON.parse(json);
          role = String(payload.role || payload.Role || role || "operator").toLowerCase();
          permissions = payload.permissions ?? permissions ?? "{}";
        } catch { /* noop */ }
      }
      
      // 3) For√ßar admin para o e-mail raiz
      if (String(email).toLowerCase() === "admin@eskimo.com") {
        role = "admin";
      }
      
      // 4) Persist√™ncia
      localStorage.setItem("role", role);
      localStorage.setItem("permissions", typeof permissions === "string" ? permissions : JSON.stringify(permissions));
      
      toast.success("‚úÖ Login realizado com sucesso!");

      setTimeout(() => {
        // admin direto em cadastro. outros ao painel inicial
        if (role === "admin") {
          window.location.href = "/cadastro";
        } else {
          window.location.href = "/inicio";
        }
      }, 1200);
    } catch (err) {
      console.error("Erro ao logar:", err.response?.data || err.message);
      toast.error("‚ùå Email ou senha inv√°lidos.");
      setLoading(false);
    }
  };

  return (
    <div style={{ minHeight: "100vh", background: "linear-gradient(to bottom right, #e0f2f1, #f0fdf4)", display: "flex", justifyContent: "center", alignItems: "center", padding: "2rem", animation: "fadeIn 0.8s ease-in-out" }}>
      <div style={{ width: "100%", maxWidth: "420px", background: "white", padding: "2.5rem", borderRadius: "1.5rem", boxShadow: "0 10px 25px rgba(0,0,0,0.1)", textAlign: "center" }}>
        <h1 style={{ fontSize: "2.5rem", color: "#065f46", fontWeight: "bold", marginBottom: "1rem" }}>üîí Acesso Eskim√≥</h1>
        <p style={{ color: "#6b7280", fontSize: "1rem", marginBottom: "2rem" }}>Entre com seu e-mail e senha para continuar</p>

        {loading ? (
          <div style={{ display: "flex", justifyContent: "center", alignItems: "center", flexDirection: "column", gap: "1rem", height: "150px" }}>
            <Loading type="spin" color="#059669" height={50} width={50} />
            <p style={{ color: "#065f46", fontWeight: "bold" }}>Carregando...</p>
          </div>
        ) : (
          <form onSubmit={handleSubmit} style={{ display: "flex", flexDirection: "column", gap: "1.5rem" }}>
            <div style={{ textAlign: "left" }}>
              <label htmlFor="email" style={labelStyle}>Email</label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Digite seu email"
                required
                style={inputStyle}
              />
            </div>

            <div style={{ textAlign: "left" }}>
              <label htmlFor="password" style={labelStyle}>Senha</label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Digite sua senha"
                required
                style={inputStyle}
              />
            </div>

            <button type="submit" style={btnPrimary}>Entrar</button>
          </form>
        )}
      </div>
    </div>
  );
}

const labelStyle = {
  fontSize: "0.875rem",
  color: "#374151",
  marginBottom: "0.5rem",
  display: "block"
};

const inputStyle = {
  width: "100%",
  padding: "0.75rem",
  borderRadius: "0.75rem",
  border: "1px solid #cbd5e1",
  background: "#f9fdfb",
  fontSize: "1rem",
  boxSizing: "border-box"
};

const btnPrimary = {
  backgroundColor: "#059669",
  color: "white",
  fontWeight: "bold",
  fontSize: "1rem",
  padding: "0.75rem",
  borderRadius: "0.75rem",
  border: "none",
  cursor: "pointer",
  transition: "all 0.3s",
  boxSizing: "border-box",
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
};
src/main.jsx
import { StrictMode, useState, useEffect } from "react";
import { createRoot } from "react-dom/client";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import "./index.css";

import SettingsManager from "./SettingsManager";
import Pedidos from "./Pedidos";
import App from "./App.jsx";
import ProductList from "./ProductList.jsx";
import Login from "./Login.jsx";
import PrivateRoute from "./PrivateRoute.jsx";
import HomePublic from "./HomePublic";
import CategoryManager from "./pages/CategoryManager";
import EstoquePorLoja from "./pages/EstoquePorLoja";
import PaymentSettings from "./PaymentSettings.jsx";
import UserManager from "./pages/UserManager";
import Dashboard from "./Dashboard.jsx";

// ü¶ä Splash screen para carregamento inicial
// eslint-disable-next-line react-refresh/only-export-components
function SplashScreen() {
  return (
    <div style={{
      minHeight: "100vh",
      background: "linear-gradient(to bottom right, #e0f2f1, #f0fdf4)",
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      alignItems: "center",
      animation: "fadeIn 0.8s ease-in-out"
    }}>
      <h1 style={{ fontSize: "2.5rem", color: "#065f46", fontWeight: "bold" }}>
        ESKIM√ì CHAPEC√ì
      </h1>
      <p style={{ fontSize: "1.2rem", color: "#065f46", marginTop: "1rem" }}>
        Carregando...
      </p>
    </div>
  );
}

// üåê App principal com rotas
// eslint-disable-next-line react-refresh/only-export-components
function MainApp() {
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 1500);
    return () => clearTimeout(timer);
  }, []);

  if (loading) return <SplashScreen />;

  return (
    <>
      <Routes>
        <Route path="/" element={<Login />} />
        <Route path="/efapi" element={<HomePublic />} />

        {/* Painel inicial por papel/permiss√£o */}
        <Route path="/inicio" element={<PrivateRoute><Dashboard /></PrivateRoute>} />

        {/* Admin-only e telas com gate interno */}
        <Route path="/cadastro" element={<PrivateRoute><App /></PrivateRoute>} />
        <Route path="/produtos" element={<PrivateRoute><ProductList /></PrivateRoute>} />
        <Route path="/categorias" element={<PrivateRoute><CategoryManager /></PrivateRoute>} />
        <Route path="/configuracoes" element={<PrivateRoute><SettingsManager /></PrivateRoute>} />
        <Route path="/pedidos" element={<PrivateRoute><Pedidos /></PrivateRoute>} />
        <Route path="/estoque" element={<PrivateRoute><EstoquePorLoja /></PrivateRoute>} />
        <Route path="/pagamentos" element={<PrivateRoute><PaymentSettings /></PrivateRoute>} />
<Route path="/users" element={<PrivateRoute><UserManager /></PrivateRoute>} />

      </Routes>

      <ToastContainer
        position="top-center"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="colored"
      />
    </>
  );
}

// üß† Renderiza√ß√£o do app
createRoot(document.getElementById("root")).render(
  <StrictMode>
    <BrowserRouter>
      <MainApp />
    </BrowserRouter>
  </StrictMode>
);
src/ProductList.jsx
// ProductList.jsx ‚Äî DnD + Pre√ßos r√°pidos + salvar layout robusto
import React, { useEffect, useMemo, useCallback, useState } from "react";
import api from "@/services/api";
import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd";
import { toast } from "react-toastify";

const pageSize = 1000;

export default function ProductList() {
  

  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [subcategories, setSubcategories] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("");

  const [editingProduct, setEditingProduct] = useState(null);
  const [form, setForm] = useState({
    id: null,
    name: "",
    description: "",
    price: "",
    imageUrl: "",
    categoryId: "",
    subcategoryId: "",
    stock: { efapi: 0, palmital: 0, passo: 0 },
  });
  const lojas = ["efapi", "palmital", "passo"];

  // ‚Äî‚Äî Edi√ß√£o r√°pida de pre√ßos ‚Äî‚Äî
  const [showPricePanel, setShowPricePanel] = useState(false);
  const [priceEdits, setPriceEdits] = useState({});

  // ‚Äî‚Äî Ordena√ß√£o / layout ‚Äî‚Äî
  const [layoutEdits, setLayoutEdits] = useState({});

  // helper: constr√≥i o mapa de layout a partir da lista atual
  const buildLayoutMap = (list) =>
    (list ?? []).reduce((acc, p, idx) => {
      const id = p?.id;
      if (!id) return acc;
      acc[id] = { sortRank: idx, pinnedTop: idx === 0 };
      return acc;
    }, {});

  // Drag end handler
  const handleDragEnd = (result) => {
    if (!result.destination) return;
    const reordered = Array.from(products);
    const [removed] = reordered.splice(result.source.index, 1);
    reordered.splice(result.destination.index, 0, removed);
    setProducts(reordered);
    setLayoutEdits(buildLayoutMap(reordered));
  };

  const saveLayout = async () => {
    try {
      // Se o usu√°rio n√£o arrastou nada, ainda assim salva a ordem atual:
      const items =
        Object.keys(layoutEdits).length > 0
          ? layoutEdits
          : buildLayoutMap(products);

      // Se o seu api.baseURL N√ÉO incluir "/api", use "/api/storefront/layout"
      await api.put("/storefront/layout", { items });

      // Recarrega para refletir ordena√ß√£o do servidor (PinnedTop/SortRank)
      await fetchProducts();
      setLayoutEdits({});
      alert("‚úÖ Layout salvo com sucesso!");
    } catch (e) {
      console.error("layout error:", {
        status: e?.response?.status,
        data: e?.response?.data,
        url: e?.config?.url,
        payload: layoutEdits,
      });
      alert("‚ùå Erro ao salvar layout.");
    }
  };

  // ‚Äî‚Äî Pre√ßos r√°pidos ‚Äî‚Äî
  const openPricePanel = () => {
    const map = {};
    (filteredProducts ?? products ?? []).forEach((p) => {
      map[p?.id] = (p?.price ?? "").toString();
    });
    setPriceEdits(map);
    setShowPricePanel(true);
  };

  const savePrice = async (id) => {
    const raw = priceEdits[id];
    const price = parseFloat(String(raw).replace(",", ".")) || 0;
    const p = (products || []).find((x) => x?.id === id);
    if (!p) {
      toast.error("Produto n√£o encontrado na lista atual.");
      return;
    }
    const previousPrice = p?.price ?? 0;

    try {
      // UI otimista
      setProducts((prev) =>
        (prev ?? []).map((it) => (it?.id === id ? { ...it, price } : it))
      );
      setPriceEdits((prev) => ({ ...prev, [id]: price.toString() }));
      toast.success("Pre√ßo atualizado!");

      const body = {
        name: p?.name ?? "",
        description: p?.description ?? "",
        price,
        imageUrl: p?.imageUrl ?? "",
        categoryId: p?.categoryId ?? null,
        subcategoryId: p?.subcategoryId ?? null,
        sortRank: p?.sortRank ?? 0,
        pinnedTop: p?.pinnedTop ?? false,
      };
      await api.put(`/products/${id}`, body);
      await fetchProducts();
      if (showPricePanel) openPricePanel();
    } catch (e) {
      setProducts((prev) =>
        (prev ?? []).map((it) => (it?.id === id ? { ...it, price: previousPrice } : it))
      );
      setPriceEdits((prev) => ({ ...prev, [id]: previousPrice.toString() }));
      console.error(e);
      toast.error("‚ùå Erro ao salvar pre√ßo.");
    }
  };

  const saveAllPrices = async () => {
    const list = (filteredProducts ?? products ?? []).slice();
    for (const p of list) {
      // salva sequencialmente para manter simples e robusto
      // (se quiser otimizar: Promise.all com cuidado)
       
      await savePrice(p?.id);
    }
    alert("‚úÖ Pre√ßos atualizados.");
    await fetchProducts();
    openPricePanel(); // re-sincroniza
  };

  // --------- API calls ---------
  const fetchProducts = useCallback(async () => {
    const res = await api.get("/products/list", {
      params: { name: searchTerm, page: 1, pageSize, _t: Date.now() },
    });
    const data = res?.data ?? [];
    // o servidor j√° ordena por PinnedTop/SortRank/Name
    const items = Array.isArray(data)
      ? data
      : Array.isArray(data.items)
      ? data.items
      : [];
    setProducts(items);
  }, [searchTerm]);

  const fetchCategories = useCallback(async () => {
    const res = await api.get("/categories");
    const data = res?.data ?? [];
    setCategories(Array.isArray(data) ? data : []);
  }, []);

  const fetchSubcategories = useCallback(async () => {
    const res = await api.get("/subcategories");
    const data = res?.data ?? [];
    setSubcategories(Array.isArray(data) ? data : []);
  }, []);

  useEffect(() => {
    (async () => {
      try {
        await Promise.all([fetchProducts(), fetchCategories(), fetchSubcategories()]);
      } catch (error) {
        console.error("Erro ao carregar dados:", error);
      }
    })();
  }, [fetchProducts, fetchCategories, fetchSubcategories]);

  // --------- Derivados ---------
  const filteredProducts = useMemo(() => {
    if (!categoryFilter) return products;
    const cf = categoryFilter.toLowerCase();
    return products.filter((p) => (p?.categoryName ?? "").toLowerCase() === cf);
  }, [products, categoryFilter]);

  const filteredSubcategories = useMemo(() => {
    const cid = parseInt(form.categoryId);
    if (!Number.isFinite(cid)) return [];
    return subcategories.filter((s) => s?.categoryId === cid);
  }, [subcategories, form.categoryId]);

  // Mant√©m o painel de pre√ßos sincronizado ao mudar filtro/lista
  useEffect(() => {
    if (!showPricePanel) return;
    const map = {};
    (filteredProducts ?? products ?? []).forEach((p) => {
      map[p?.id] = (p?.price ?? "").toString();
    });
    setPriceEdits(map);
  }, [showPricePanel, filteredProducts, products]);

  // --------- Handlers (editar / salvar / deletar) ---------
  const handleEdit = async (product) => {
    try {
      const stockRes = await api.get("/stock");
      const stockArr = Array.isArray(stockRes?.data) ? stockRes.data : [];
      const stockData = stockArr.find((s) => s?.productId === product?.id);
      setEditingProduct(product);
      setForm({
        id: product?.id ?? null,
        name: product?.name ?? "",
        description: product?.description ?? "",
        price: (product?.price ?? "").toString(),
        imageUrl: product?.imageUrl ?? "",
        categoryId: (product?.categoryId ?? "").toString(),
        subcategoryId: product?.subcategoryId ? product.subcategoryId.toString() : "",
        stock: {
          efapi: stockData?.efapi ?? 0,
          palmital: stockData?.palmital ?? 0,
          passo: stockData?.passo ?? 0,
        },
      });
    } catch (err) {
      console.error("Erro ao carregar estoque:", err);
    }
  };

  const handleUpdate = async () => {
    try {
      const body = {
        name: form.name,
        description: form.description,
        price: parseFloat(form.price) || 0,
        imageUrl: form.imageUrl,
        categoryId: parseInt(form.categoryId) || null,
        subcategoryId: form.subcategoryId ? parseInt(form.subcategoryId) : null,
        sortRank: editingProduct?.sortRank ?? 0,
        pinnedTop: editingProduct?.pinnedTop ?? false,
      };
      await api.put(`/products/${form.id}`, body);
      await api.post(`/stock/${form.id}`, form.stock);
      alert("‚úÖ Produto atualizado com sucesso!");
      setEditingProduct(null);
      setForm({
        id: null,
        name: "",
        description: "",
        price: "",
        imageUrl: "",
        categoryId: "",
        subcategoryId: "",
        stock: { efapi: 0, palmital: 0, passo: 0 },
      });
      fetchProducts();
    } catch (err) {
      console.error("Erro ao atualizar produto:", err);
      alert("‚ùå Erro ao atualizar produto.");
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm("Deseja excluir este produto?")) {
      try {
        await api.delete(`/products/${id}`);
        fetchProducts();
      } catch (err) {
        console.error("Erro ao excluir produto:", err);
      }
    }
  };

  const handleCancelEdit = () => {
    setEditingProduct(null);
    setForm({
      id: null,
      name: "",
      description: "",
      price: "",
      imageUrl: "",
      categoryId: "",
      subcategoryId: "",
      stock: { efapi: 0, palmital: 0, passo: 0 },
    });
  };

  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });

  const handleStockChange = (loja, value) => {
    const v = parseInt(value);
    setForm((prev) => ({
      ...prev,
      stock: { ...prev.stock, [loja]: Number.isFinite(v) && v >= 0 ? v : 0 },
    }));
  };

  const money = (v) => {
    const n = Number(v);
    return Number.isFinite(n) ? n.toFixed(2) : "0.00";
  };
  const role = localStorage.getItem("role");
  const isAdmin = role === "admin";
  if (!isAdmin) return <div className="p-8">Acesso restrito ao administrador.</div>;
  
  return (
    <div className="p-8 bg-gray-50 min-h-screen text-gray-800">
      <h1 className="text-3xl font-bold mb-6 text-center">
        üì¶ Lista de Produtos ({filteredProducts.length})
      </h1>

      <div className="flex gap-3 mb-4">
        <button
          onClick={() => window.history.back()}
          className="rounded-md border border-gray-300 bg-white px-4 py-1 text-sm text-gray-600 hover:bg-gray-100"
        >
          ‚Üê Voltar
        </button>
        <button
          onClick={saveLayout}
          className="rounded-md bg-blue-600 text-white px-4 py-1 text-sm hover:bg-blue-700"
          title="Arraste linhas para alterar a ordem e salve"
        >
          üíæ Salvar Layout
        </button>
      </div>

      <div className="flex flex-wrap items-center gap-3 mt-4">
        <button
          onClick={() => (showPricePanel ? setShowPricePanel(false) : openPricePanel())}
          className={`rounded-md px-4 py-2 text-sm font-semibold shadow border
            ${showPricePanel ? "bg-yellow-200 border-yellow-300 text-gray-800" : "bg-white border-gray-300 text-gray-700 hover:bg-gray-100"}`}
        >
          üí≤ Pre√ßos
        </button>
        {showPricePanel && (
          <>
            <button
              onClick={saveAllPrices}
              className="rounded-md px-4 py-2 text-sm font-semibold shadow bg-green-600 text-white hover:bg-green-700"
            >
              üíæ Salvar todos
            </button>
            <span className="text-sm text-gray-600">
              Editando {filteredProducts.length} produto(s)
            </span>
          </>
        )}
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6 mt-4">
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          placeholder="üîç Buscar por nome"
          className="p-3 border rounded"
        />
        <select
          value={categoryFilter}
          onChange={(e) => setCategoryFilter(e.target.value)}
          className="p-3 border rounded"
        >
          <option value="">Todas as categorias</option>
          {categories.map((cat) => (
            <option key={cat?.id} value={cat?.name}>
              {cat?.name}
            </option>
          ))}
        </select>
      </div>

      {/* Painel de pre√ßos r√°pidos */}
      {showPricePanel && (
        <div className="mb-6 rounded border border-gray-200 bg-white p-3 shadow-sm">
          <h3 className="mb-3 text-base font-semibold text-green-700">Edi√ß√£o r√°pida de pre√ßos</h3>

          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-3">
            {filteredProducts.map((p) => (
              <div key={p?.id} className="flex items-center gap-3 rounded border border-gray-200 p-2">
                <img
                  src={p?.imageUrl}
                  alt={p?.name}
                  className="h-12 w-12 rounded object-contain border"
                />
                <div className="min-w-0 flex-1">
                  <div className="truncate text-sm font-medium text-gray-800">{p?.name ?? "‚Äî"}</div>
                  <div className="truncate text-xs text-gray-500">
                    {p?.categoryName ?? "‚Äî"}{p?.subcategoryName ? ` ‚Ä¢ ${p.subcategoryName}` : ""}
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <span className="text-xs text-gray-500">R$</span>
                  <input
                    type="number"
                    step="0.01"
                    inputMode="decimal"
                    value={priceEdits[p?.id] ?? (p?.price ?? "")}
                    onChange={(e) => {
                      const v = e.target.value;
                      setPriceEdits((prev) => ({ ...prev, [p?.id]: v }));
                    }}
                    onKeyDown={(e) => {
                      if (e.key === "Enter") savePrice(p?.id);
                    }}
                    className="w-28 rounded border border-gray-300 px-2 py-1 text-right text-sm"
                  />

                  <button
                    onClick={() => savePrice(p?.id)}
                    className="rounded bg-green-600 px-2 py-1 text-xs font-semibold text-white hover:bg-green-700"
                    title="Salvar este produto"
                  >
                    Salvar
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Tabela com drag-and-drop nas linhas */}
      <DragDropContext onDragEnd={handleDragEnd}>
        <table className="min-w-full bg-white rounded shadow mt-6">
        <thead className="bg-green-100 text-green-900">
  <tr>
    <th className="p-3 text-left">Imagem</th>
    <th className="p-3 text-left">Produto</th>
    <th className="p-3 text-left">Pre√ßo</th>
    <th className="p-3 text-left">Categoria</th>
    <th className="p-3 text-left">Subcategoria</th>
    <th className="p-3 text-left">A√ß√µes</th>
  </tr>
</thead>


          <Droppable droppableId="products">
            {(provided) => (
              <tbody ref={provided.innerRef} {...provided.droppableProps}>
                {filteredProducts.map((p, index) => (
                  <Draggable key={p?.id} draggableId={String(p?.id)} index={index}>
                    {(prov) => (
                      <tr
                      ref={prov.innerRef}
                      {...prov.draggableProps}
                      {...prov.dragHandleProps}
                      style={prov.draggableProps.style}
                      className="border-t hover:bg-gray-50"
                    >
                      <td className="p-3">
                        <img
                          src={p?.imageUrl}
                          alt={p?.name}
                          className="h-12 w-12 rounded border object-contain bg-white"
                          onError={(e)=>{ e.currentTarget.src="https://via.placeholder.com/48?text=No+Img"; }}
                        />
                      </td>
                      <td className="p-3">{p?.name ?? "‚Äî"}</td>
                      <td className="p-3">R$ {money(p?.price)}</td>
                    
                        <td className="p-3">{p?.categoryName ?? "‚Äî"}</td>
                        <td className="p-3">{p?.subcategoryName ?? "‚Äî"}</td>
                        <td className="p-3 flex gap-2">
                          <button onClick={() => handleEdit(p)} className="text-blue-600 hover:underline">‚úèÔ∏è</button>
                          <button onClick={() => handleDelete(p?.id)} className="text-red-600 hover:underline">üóëÔ∏è</button>
                        </td>
                      </tr>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </tbody>
            )}
          </Droppable>
        </table>
      </DragDropContext>

      {/* Editor lateral (igual ao antigo) */}
      {editingProduct && (
        <div className="fixed top-0 right-0 w-full max-w-sm h-full bg-white p-6 shadow-xl overflow-y-auto z-50">
          <button
            onClick={handleCancelEdit}
            className="text-gray-600 text-xl float-right"
            aria-label="Fechar edi√ß√£o"
          >
            ‚úñ
          </button>
          <h2 className="text-xl font-bold mb-4 text-green-700">‚úèÔ∏è Editar Produto</h2>

          {"name description price imageUrl".split(" ").map((field) => (
            <div className="mb-4" key={field}>
              <label className="block text-sm mb-1">
                {field.charAt(0).toUpperCase() + field.slice(1)}
              </label>
              <input
                name={field}
                value={form[field]}
                onChange={handleChange}
                className="w-full p-2 border rounded"
              />
            </div>
          ))}

          <div className="mb-4">
            <label className="block text-sm mb-1">Categoria</label>
            <select
              name="categoryId"
              value={form.categoryId}
              onChange={handleChange}
              className="w-full p-2 border rounded"
            >
              <option value="">Selecione...</option>
              {categories.map((cat) => (
                <option key={cat?.id} value={cat?.id}>
                  {cat?.name}
                </option>
              ))}
            </select>
          </div>

          <div className="mb-4">
            <label className="block text-sm mb-1">Subcategoria</label>
            <select
              name="subcategoryId"
              value={form.subcategoryId}
              onChange={handleChange}
              className="w-full p-2 border rounded"
            >
              <option value="">Selecione...</option>
              {filteredSubcategories.map((sub) => (
                <option key={sub?.id} value={sub?.id}>
                  {sub?.name}
                </option>
              ))}
            </select>
          </div>

          <div className="mb-6">
            <label className="block text-sm mb-1">Estoque por Loja</label>
            {lojas.map((loja) => (
              <div key={loja} className="mb-2">
                <label className="text-sm capitalize">{loja}</label>
                <input
                  type="number"
                  min="0"
                  value={form.stock[loja]}
                  onChange={(e) => handleStockChange(loja, e.target.value)}
                  className="w-full p-2 border rounded"
                />
              </div>
            ))}
          </div>

          <div className="flex gap-3">
            <button
              onClick={handleUpdate}
              className="bg-green-600 text-white px-4 py-2 rounded"
            >
              üíæ Salvar
            </button>
            <button
              onClick={handleCancelEdit}
              className="bg-gray-300 px-4 py-2 rounded"
            >
              Cancelar
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
src/services/api.js
import axios from "axios";

const API_URL = "https://backend-eskimo.onrender.com/api";

const api = axios.create({
  baseURL: API_URL,
});

api.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export default api;
